library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(concrete)
head(mixture)
head(mixtures)
library(Hmisc)
install.packages("Hmisc")
training2 <- training
training2$CompressiveStrength <- cut2(training2$CompressiveStrength, g=4)
?cut2
library(Hmisc)
training2$CompressiveStrength <- cut2(training2$CompressiveStrength, g=4)
?Hmisc
ggpairs(data = training2, columns = c("FlyAsh","Age","CompressiveStrength"), mapping = ggplot2::aes(colour = CompressiveStrength))
library(ggplot2)
ggpairs(data = training2, columns = c("FlyAsh","Age","CompressiveStrength"), mapping = ggplot2::aes(colour = CompressiveStrength))
install.packages("GGally")
ggpairs(data = training2, columns = c("FlyAsh","Age","CompressiveStrength"), mapping = ggplot2::aes(colour = CompressiveStrength))
library(GGally)
ggpairs(data = training2, columns = c("FlyAsh","Age","CompressiveStrength"), mapping = ggplot2::aes(colour = CompressiveStrength))
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() + theme_bw()
cutCS <- cut2(training$CompressiveStrength, g = 4)
summary(cutCS)
names <- colnames(concrete)
name
names
names <- names[-length(names)]
names
featurePlot(x = training[, names], y = cutCS, plot = "box")
?featurePlot
?histogram
histogram(training$SuperPlasticizer)
histogram(SuperPlasticizer, data=training)
histogram(training$SuperPlasticizer)
names(training)
histogram(training$Superplasticizer)
histogram(log(training$Superplasticizer))
histogram(training$Superplasticizer)
histogram(log(training$Superplasticizer + 1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433);data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433);data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433);data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]];training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
?startsWith
startsWith(names(training), "IL")
names(training)[startsWith(names(training), "IL")]
predictors <- names(training)[startsWith(names(training), "IL")]
?preProcess
preProcess(training[,predictors], method="pca", pcaComp=.9)
result <- preProcess(training[,predictors], method="pca", pcaComp=.9)
plot(result)
summary(result)
training[,predictors]
result
summary(result)
result$$numComp
result$numComp
result <- preProcess(training[,predictors], method="pca", thresh = =.9)
result <- preProcess(training[,predictors], method="pca", thresh =.9)
result$numComp
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433);data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]];training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
predictors
pred <- startsWith(names(training), "IL")
procTrain <- preProcess(training[,pred], method="pca", thresh=0.8)
non-pca <- train(training$diagnosis ~ training[,pred], method="glm")
non-pca <- train(diagnosis ~ pred, data=training, method="glm")
trainset <- training[,c("diagnosis", pred)]
pred
pred <- training[,pred]
pred
head(pred)
non-pca <- train(training$diagnosis ~ pred, method="glm")
non-pca <- train(training$diagnosis ~ pred, method="glm", list=TRUE)
trainingIL <- training[,grep("^IL|diagnosis", names(training))]
testingIL <- testing[,grep("^IL|diagnosis", names(testing))]
preProc <- preProcess(trainingIL, method = 'pca', thresh = 0.8)
fit <- train(diagnosis~., data=trainingIL, method="glm")
install.packages("e1071")
fit <- train(diagnosis~., data=trainingIL, method="glm")
pred <- predict(fit, testingIL)
?predict
confusionMatrix(pred, testingIL$diagnosis)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
subset <- createDataPartition
?createDataPartition
subset <- createDataPartition(segmentationOriginal$Case)
training <- segmentationOriginal[subset,]
subset
training <- segmentationOriginal[subset]
training <- segmentationOriginal[subset,]
subset <- createDataPartition(segmentationOriginal$Case, list=FALSE)
training <- segmentationOriginal[subset,]
test <- segmentationOriginal[-subset,]
seed(125)
set.seed(125)
model <- rpart(Case ~ ., data=training)
library(rpart)
model <- rpart(Case ~ ., data=training)
model
plot(model)
rpart.plot(model)
?rpart.plot
rpart.plot(model)
libtrary(rpart.plot)
library(rpart.plot)
rpart.plot(model)
rpart.plot(model$finalModel)
model <- train(Class ~ ., method = "rpart", data = training)
rpart.plot(model$finalModel)
set.seed(125)
model <- train(Class ~ ., method = "rpart", data = training)
rpart.plot(model$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
subset <- createDataPartition(olive$Area, list=FALSE)
training <- olive[subset,]
test <- olive[-subset,]
model <- train(Area ~ ., method = "tree", data = training)
?train
names(getModelInfo())
model <- train(Area ~ ., method = "party", data = training)
model <- train(Area ~ ., method = "rpart", data = training)
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata)
head(olive)
unique(olive$Area)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearm")
install.packages("ElemStatLearn")
R
R.version
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages("gbm")
library(gbm)
set.seed(62433)
head(training)
names(training)
model_rf <- train(diagnosis~., data=training, method="rf")
unique(training$diagnosis)
model_gbm <- train(diagnosis~., data=training, method="gbm")
model_lda <- train(diagnosis~., data=training, method="lda")
pred_rf <- predict(model_rf, testing)
pred_gbm <- predict(model_gbm, testing)
pred_lda <- predict(model_lda, testing)
model_comb <- train(training$diagnosis ~ pred_rf + pred_gbm + pred_lda, method="rf")
pred_rf <- predict(model_rf, training)
pred_gbm <- predict(model_gbm, training)
pred_rf <- predict(model_rf, training)
model_comb <- train(training$diagnosis ~ pred_rf + pred_gbm + pred_lda, method="rf")
pred_lda <- predict(model_lda, training)
model_comb <- train(training$diagnosis ~ pred_rf + pred_gbm + pred_lda, method="rf")
data <- cbind(diagnosis=training$diagnosis, pred_rf, pred_gbm, pred_lda)
model_comb <- train(diagnosis ~ ., data=data, method="rf")
pred_rf <- predict(model_rf, test)
pred_rf <- predict(model_rf, testing)
pred_gbm <- predict(model_gbm, testing)
pred_lda <- predict(model_lda, testing)
pred_comb <- predict(model_comb, testing)
data <- data.frame(diagnosis=training$diagnosis, pred_rf, pred_gbm, pred_lda)
data <- data.frame(pred_rf, pred_gbm, pred_lda, diagnosis=training$diagnosis)
dim(pred_rf)
pred_rf <- predict(model_rf, test)
pred_rf <- predict(model_rf, testing)
dim(pred_rf)
pred_rf <- predict(model_rf, new_data=testing)
dim(pred_rf)
pred_rf <- predict(model_rf, newdata=testing)
dim(pred_rf)
summary(model_rf)
pred_rf <- predict(model_rf, newdata=testing)library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret){}
library(caret)
model_rf <- train(diagnosis~., data=training, method="rf")
model_gbm <- train(diagnosis~., data=training, method="gbm", verbose=FALSE)
model_lda <- train(diagnosis~., data=training, method="lda")
pred_rf_tr <- predict(model_rf, newdata=testing)
pred_rf_gbm <- predict(model_gbm, newdata=testing)
pred_rf_lda <- predict(model_lda, newdata=testing)
newdata <- data.frame(pred_rf_tr, pred_rf_gbm, pred_rf_lda, diagnosis=testing$diagnosis)
new_comb <- train(diagnosis~., data=newdata, method="rf")
confusionMatrix(pred_rf_tr, testing)$overall["Accuracy"]
confusionMatrix(pred_rf_tr, testing$diagnosis)$overall["Accuracy"]
confusionMatrix(pred_rf_gbm, testing$diagnosis)$overall["Accuracy"]
confusionMatrix(pred_rf_lda, testing$diagnosis)$overall["Accuracy"]
confusionMatrix(new_comb, testing$diagnosis)$overall["Accuracy"]
new_comb <- train(diagnosis~., newdata=newdata, method="rf")
new_comb <- train(diagnosis~., newdata=newdata, method="rf")
head(newdata)
new_comb <- train(diagnosis~., newdata=newdata, method="rf")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
names(training)
model <- train(CompressiveStrength~., data=training, method="lasso")
?plot.enet
?plot.enet(model)
plot.enet(model)
?plot.enet
plot.enet(model, xvar="penalty")
plot.enet(model$finalModel, xvar="penalty")
set.seed(233)
modFit<-train(CompressiveStrength ~ ., method="lasso", data=training)
plot.enet(modFit$finalModel, xvar = "penalty", use.color = TRUE)
library(elasticnet)
set.seed(233)
modFit<-train(CompressiveStrength ~ ., method="lasso", data=training)
plot.enet(modFit$finalModel, xvar = "penalty", use.color = TRUE)
?bats
library(forecast)
install.packages("forecast")
library(forecast)
?bats
?ts
?forecast
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testin
testing = concrete[-inTrain,]
set.seed(325)
install.packages("e1071")
library(e1071)
model <- train(CompressiveStrength~., data=training, method="svm")
?e1071
??e1071
model <- svm(CompressiveStrength~., data=training)
pred <- predict(model, testing)
accuracy(pred, testing$CompressiveStrength)
install.packages("shiny")
install.packages("plotly")
setwd("~/R scripts/datasciencecoursera/Data Science Capstone")
1 <- readRDS("./data/model/1_onigram_freq")
first <- readRDS("./data/model/1_onigram_freq")
second <- readRDS("./data/model/1_onigram_freq")
second <- readRDS("./data/model/2_onigram_freq")
third <- readRDS("./data/model/3_onigram_freq")
first
first <- read_file("./data/model/1_onigram_freq")
library(readr)
first <- read_file("./data/model/1_onigram_freq")
first
first <- readRDS("./data/model/1_onigram_freq")
class(first)
library(tidyr)
as_tibble(first)
first <- as_tibble(readRDS("./data/model/1_onigram_freq"))
first
first <- as_tibble(readRDS("./data/model/1_onigram_freq"))
second <- as_tibble(readRDS("./data/model/2_onigram_freq"))
third <- as_tibble(readRDS("./data/model/3_onigram_freq"))
third
library(dplyr)
bind_rows(first, second)
bind_rows(first, second, third)
final_onigram <- bind_rows(first, second, third) %>%
group_by(term) %>% %>% summarise(freq = sum(count)) %>%
arrange(desc(freq))
final_onigram <- bind_rows(first, second, third) %>%
group_by(term) %>% %>% summarise(freq = sum(freq)) %>%
arrange(desc(freq))
final_onigram <- bind_rows(first, second, third) %>%
group_by(term) %>% %>% summarise(freq = sum(freq)) %>%
arrange(desc(freq))
final_onigram <- bind_rows(first, second, third) %>%
group_by(term) %>% summarise(freq = sum(freq)) %>%
arrange(desc(freq))
final_onigram
tail(final_onigram)
first <- as_tibble(readRDS("./data/model/1_bigram_freq"))
second <- as_tibble(readRDS("./data/model/2_bigram_freq"))
third <- as_tibble(readRDS("./data/model/3_bigram_freq"))
first
second
third
final_bigram <- bind_rows(first, second, third) %>%
group_by(term) %>% summarise(freq = sum(freq)) %>%
arrange(desc(freq))
first <- as_tibble(readRDS("./data/model/1_trigram_freq"))
second <- as_tibble(readRDS("./data/model/2_trigram_freq"))
third <- as_tibble(readRDS("./data/model/3_trigram_freq"))
first
second
source('~/R scripts/datasciencecoursera/Data Science Capstone/data_cleaning.R')
source('~/R scripts/datasciencecoursera/Data Science Capstone/data_cleaning.R')
source('~/R scripts/datasciencecoursera/Data Science Capstone/data_cleaning.R')
x <- as_tibble(readRDS("./data/model/1_onigram_freq"))
y <- as_tibble(readRDS("./data/model/2_onigram_freq"))
x
y
log(y[,"freq"])
tail(log(y[,"freq"]))
source('~/R scripts/datasciencecoursera/Data Science Capstone/merge_ngrams.R')
saveRDS(final_bigram, "./data/model/final_bigram")
saveRDS(final_onigram, "./data/model/final_onigram")
saveRDS(final_trigram, "./data/model/final_trigram")
saveRDS(final_quadgram, "./data/model/final_quadgram")
final_onigram <- readRDS("./data/model/final_onigram")
final_onigram
tail(final_onigram)
final_onigram[,"freq"] <- log(final_onigram[,"freq"])
final_onigram
filter(final_onigram, freq >= 1)
filter(final_onigram, freq > 0)
round(sum(final_onigram[1:109000,2]) / sum(final_onigram$freq), digits = 3)
round(sum(final_onigram[1:100000,2]) / sum(final_onigram$freq), digits = 3)
final_onigram <- readRDS("./data/model/final_onigram")
round(sum(final_onigram[1:100000,2]) / sum(final_onigram$freq), digits = 3)
final_onigram[,"freq"] <- log(final_onigram[,"freq"])
final_onigram <- filter(final_onigram, freq > 0)
final_onigram
log(2)
log(1)
final_bigram <- readRDS("./data/model/final_bigram")
final_bigram
final_bigram[,"freq"] <- log(final_bigram[,"freq"])
final_bigram
final_bigram <- filter(final_bigram, freq > 0)
final_bigram
final_trigram <- readRDS("./data/model/final_trigram")
final_trigram
final_trigram[,"freq"] <- log(final_trigram[,"freq"])
final_trigram
final_trigram <- filter(final_trigram, freq > 0)
final_quadgram <- readRDS("./data/model/final_quadgram")
final_quadgram[,"freq"] <- log(final_quadgram[,"freq"])
final_quadgram
final_quadgram <- filter(final_quadgram, freq > 0)
save(final_onigram, "./data/model/final_onigram_red")
save(final_bigram, "./data/model/final_bigram_red")
save(final_trigram, "./data/model/final_trigram_red")
save(final_quadgram, "./data/model/final_quadgram_red")
saveRDS(final_onigram, "./data/model/final_onigram_red")
saveRDS(final_bigram, "./data/model/final_bigram_red")
saveRDS(final_trigram, "./data/model/final_trigram_red")
saveRDS(final_quadgram, "./data/model/final_quadgram_red")
final_model <-c(final_onigram, final_bigram, final_trigram, final_quadgram)
final_model
final_model$final_onigram
str(final_model)
final_model <- list(final_onigram, final_bigram, final_trigram, final_quadgram)
final_model$final_onigram
final_model[final_onigram]
final_model
final_model[1]
final_model[[1]]
final_model[[1]][,"freq"]
saveRDS(final_model, "./data/model/final_model")
?br
shiny::runApp('WordPredictor v.1')
runApp('WordPredictor v.1')
runApp('WordPredictor v.1')
runApp('WordPredictor v.1')
runApp('WordPredictor v.1')
pred_df <- readRDS("../data/model/final_model")
pred_df <- readRDS("./data/model/final_model")
final_model[[1]]
pred_df[[1]]
pred_df[[1]]["freq"]
runApp('WordPredictor v.1')
runApp('WordPredictor v.1')
?verbatimTextOutput
runApp('WordPredictor v.1')
findBestMatches <- function(words, n, pred_df, num_pred, nxt=FALSE) {
words <- lastWords(words, n)
if (nxt) words <- paste(words, " ", sep="")
f <- head(pred_df[grep(paste("^", words, sep = ""),
pred_df["term"]), "term"],
num_pred)
if (nxt) {
f <- gsub(paste("^", words, sep = ""), "", f)
}
return(f)
}
findBestMatches("hel", 1, pred_df[[1]], 5, nxt=FALSE)
pred_df[[1]]
pred_df[[1]][grep("hel", pred_df[[1]][,"term"]), "term"]
grep("hel", pred_df[[1]][,"term"])
grepl("hel", pred_df[[1]][,"term"])
select(pred_df[[1]], starts_with("hel"))
select(pred_df[[1]][,"term"], starts_with("hel"))
select(pred_df[[1]][,"term"], starts_with("th"))
select(pred_df[[1]], starts_with("th"))
pred_df[[1]]
pred_df[[1]]["term"]
pred_df[[1]][,"term"]
select(pred_df[[1]]["term"], starts_with("th"))
select(pred_df[[1]], starts_with("th"))
pred_df[[1]] %>% select(starts_with("th"))
pred_df[[1]] %>% select(starts_with("the"))
pred_df[[1]]
filter(pred_df[[1]], grep("hel", term))
filter(pred_df[[1]], grep("hel"))
filter(pred_df[[1]], grep("hel", pred_df[[1]]["term"]))
grep("hel", pred_df[[1]]["term"])
grepl("hel", pred_df[[1]]["term"])
pred_df[[1]]["term"]
library(stringr)
filter(pred_df[[1]], str_detect(term, "hel"))
filter(pred_df[[1]], str_detect(term, "^hel"))
head(filter(pred_df[[1]], str_detect(term, "^hel")))
head(filter(pred_df[[1]], str_detect(term, "^hel")), 5)
head(filter(pred_df[[1]], str_detect(term, "^hel")), 5)[term]
head(filter(pred_df[[1]], str_detect(term, "^hel")), 5)["term"]
list(head(filter(pred_df[[1]], str_detect(term, "^hel")), 5)[term])
list(head(filter(pred_df[[1]], str_detect(term, "^hel")), 5)["term"])
as.list(head(filter(pred_df[[1]], str_detect(term, "^hel")), 5)["term"])
as.vector(head(filter(pred_df[[1]], str_detect(term, "^hel")), 5)["term"])
as.list(head(filter(pred_df[[1]], str_detect(term, "^hel")), 5)["term"])
unlist(as.list(head(filter(pred_df[[1]], str_detect(term, "^hel")), 5)["term"]))
x <- unlist(as.list(head(filter(pred_df[[1]], str_detect(term, "^hel")), 5)["term"]))
gsub(paste("^he", words, sep = ""), "", x)
runApp('WordPredictor v.1')
findBestMatches("hel", 1, pred_df[[1]], 5, nxt=FALSE)
x <- findBestMatches("hel", 1, pred_df[[1]], 5, nxt=FALSE)
gsub(paste("^", "hel", sep = ""), "", x)
as.data.frame(x)
y <- as.data.frame(x)
gsub(paste("^", "hel", sep = ""), "", y)
paste("^", "hel", sep = "")
gsub(paste("^", "hel", sep = ""), "", y)
y
class(y)
head(y)
class(head(y))
class(gsub(paste("^", "hel", sep = ""), "", y))
y
print(gsub(paste("^", "hel", sep = ""), "", y))
cat(gsub(paste("^", "hel", sep = ""), "", y))
y
y["term"]
gsub(paste("^", "hel", sep = ""), "", y["term"])
y[["term"]]
gsub(paste("^", "hel", sep = ""), "", y[["term"]])
runApp('WordPredictor v.1')
q <- gsub(paste("^", "hel", sep = ""), "", y[["term"]])
class(q)
unlist(q)
runApp('WordPredictor v.1')
runApp('WordPredictor v.1')
runApp('WordPredictor v.1')
runApp('WordPredictor v.1')
runApp('WordPredictor v.1')
runApp('WordPredictor v.1')
runApp('WordPredictor v.1')
runApp('WordPredictor v.1')
runApp()
runApp('WordPredictor v.1')
runApp('WordPredictor v.1')
